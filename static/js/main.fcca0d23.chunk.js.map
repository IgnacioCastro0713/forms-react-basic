{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Form","useForm","handleSubmit","register","errors","useState","alert","setAlert","className","role","onSubmit","values","e","title","body","fetch","method","JSON","stringify","userId","headers","then","response","ok","target","reset","json","console","log","htmlFor","type","placeholder","id","name","ref","required","message","rows","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","module","exports"],"mappings":"8OAyFeA,EAtFF,WAAO,IAAD,EACuBC,cAAlCC,EADW,EACXA,aAAcC,EADH,EACGA,SAAUC,EADb,EACaA,OADb,EAEMC,mBAAS,IAFf,mBAEbC,EAFa,KAENC,EAFM,KA4BlB,OACC,yBAAKC,UAAU,kBACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,aACd,wBAAIA,UAAU,+BAAd,cACCF,GAAS,yBAAKE,UAAU,sBAAsBC,KAAK,SAClDH,GAEF,yBAAKE,UAAU,OACd,yBAAKA,UAAU,oBACd,yBAAKA,UAAU,gBACd,yBAAKA,UAAU,eACd,wBAAIA,UAAU,QAAd,aAED,yBAAKA,UAAU,aACd,0BAAME,SAAUR,GAvCP,SAACS,EAAQC,GAAO,IAEzBC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,KAEdC,MAAM,6CAA8C,CACnDC,OAAQ,OACRF,KAAMG,KAAKC,UAAU,CACpBL,MAAOA,EACPC,KAAMA,EACNK,OAAQ,IAETC,QAAS,CACR,eAAgB,qCAEfC,MAAK,SAAAC,GACP,GAAKA,EAASC,GAKd,OAFAhB,EAAS,2BACTK,EAAEY,OAAOC,QACFH,EAASI,UACdL,MAAK,SAAAK,GAAI,OAAIC,QAAQC,IAAIF,UAmBpB,yBAAKlB,UAAU,cACd,2BAAOqB,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOtB,UAAS,uBAAkBJ,EAAOS,MAAQ,aAAe,IACxEkB,YAAY,QACZC,GAAG,QACHC,KAAK,QACLC,IAAK/B,EAAS,CACbgC,SAAU,mCAEd/B,EAAOS,OACR,2BAAOL,UAAU,eAChB,oCAAUJ,EAAOS,MAAMuB,WAIzB,yBAAK5B,UAAU,cACd,2BAAOqB,QAAQ,eAAf,eACA,8BAAUrB,UAAS,uBAAkBJ,EAAOU,KAAO,aAAe,IAAMuB,KAAK,IACxEN,YAAY,qBACZC,GAAG,cACHC,KAAK,OACLC,IAAK/B,EAAS,CACbgC,SAAU,+CAEf/B,EAAOU,MACR,2BAAON,UAAU,eAChB,gCAASJ,EAAOU,KAAKsB,WAIvB,4BAAQN,KAAK,SAAStB,UAAU,0BAAhC,iB,gBC5DK8B,MAXf,WACE,OACE,yBAAK9B,UAAU,QACb,yBAAKA,UAAU,eACb,yBAAK+B,IAAKC,IAAMhC,UAAU,WAAWiC,IAAI,UAE3C,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMtB,a,kBEzI5BuB,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.fcca0d23.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {useForm} from 'react-hook-form';\r\n\r\nconst Form = () => {\r\n\tconst {handleSubmit, register, errors} = useForm();\r\n\tlet [alert, setAlert] = useState(\"\");\r\n\t\r\n\tconst sendForm = (values, e) => {\r\n\t\t\r\n\t\tconst {title, body} = values;\r\n\t\t\r\n\t\tfetch('https://jsonplaceholder.typicode.com/posts', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\ttitle: title,\r\n\t\t\t\tbody: body,\r\n\t\t\t\tuserId: 1\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json; charset=UTF-8\"\r\n\t\t\t}\r\n\t\t}).then(response => {\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsetAlert('Post successfully added');\r\n\t\t\te.target.reset();\r\n\t\t\treturn response.json()\r\n\t\t}).then(json => console.log(json));\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<div className=\"container py-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t\t<h2 className=\"text-center text-white mb-4\">React Form</h2>\r\n\t\t\t\t\t{alert && <div className=\"alert alert-success\" role=\"alert\">\r\n\t\t\t\t\t\t{alert}\r\n\t\t\t\t\t</div>}\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<div className=\"col-md-6 mx-auto\">\r\n\t\t\t\t\t\t\t<div className=\"card rounded\">\r\n\t\t\t\t\t\t\t\t<div className=\"card-header\">\r\n\t\t\t\t\t\t\t\t\t<h3 className=\"mb-0\">Add Post</h3>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t\t\t<form onSubmit={handleSubmit(sendForm)}>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"title\">Title</label>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className={`form-control ${errors.title ? 'is-invalid' : ''}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t placeholder=\"title\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t id=\"title\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t name=\"title\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t ref={register({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t required: \"The title field is required.\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t })}/>\r\n\t\t\t\t\t\t\t\t\t\t\t{errors.title &&\r\n\t\t\t\t\t\t\t\t\t\t\t<small className=\"text-danger\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<strong> {errors.title.message}</strong>\r\n\t\t\t\t\t\t\t\t\t\t\t</small>\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"publication\">Publication</label>\r\n\t\t\t\t\t\t\t\t\t\t\t<textarea className={`form-control ${errors.body ? 'is-invalid' : ''}`} rows=\"5\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Write something...\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"publication\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"body\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tref={register({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired: \"The body of the publication is required.\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})}/>\r\n\t\t\t\t\t\t\t\t\t\t\t{errors.body &&\r\n\t\t\t\t\t\t\t\t\t\t\t<small className=\"text-danger\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<strong>{errors.body.message}</strong>\r\n\t\t\t\t\t\t\t\t\t\t\t</small>\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-block btn-info\">Send</button>\r\n\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\nimport './App.css';\n\nimport {Form} from './components/index'\nimport logo from \"./logo.svg\";\n\nfunction App() {\n  return (\n    <div className=\"Main\">\n      <div className=\"Center-icon\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n      </div>\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import css Bootstrap\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}